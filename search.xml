<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在hexo博客中使用数学公式</title>
      <link href="/2019/07/01/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2019/07/01/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="第一步：-安装Kramed"><a href="#第一步：-安装Kramed" class="headerlink" title="第一步： 安装Kramed"></a>第一步： 安装Kramed</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn remove hexo-renderer-marked</span><br><span class="line">yarn add hexo-renderer-kramed</span><br></pre></td></tr></table></figure><h2 id="第二步：更改文件配置"><a href="#第二步：更改文件配置" class="headerlink" title="第二步：更改文件配置"></a>第二步：更改文件配置</h2><p>打开<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code>，更改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Fit kramed's rule: $$ + \1 + $$</span></span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/`\$(.*?)\$`/g</span>, <span class="string">'$$$$$1$$$$'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Change inline math rule</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatText</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步-停止使用-hexo-math，并安装mathjax包"><a href="#第三步-停止使用-hexo-math，并安装mathjax包" class="headerlink" title="第三步: 停止使用 hexo-math，并安装mathjax包"></a>第三步: 停止使用 hexo-math，并安装mathjax包</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn remove hexo-math</span><br><span class="line">yarn add hexo-renderer-mathjax</span><br></pre></td></tr></table></figure><h2 id="第四步-更新-Mathjax-的-配置文件"><a href="#第四步-更新-Mathjax-的-配置文件" class="headerlink" title="第四步: 更新 Mathjax 的 配置文件"></a>第四步: 更新 Mathjax 的 配置文件</h2><p>打开<code>/node_modules/hexo-renderer-mathjax/mathjax.html</code></p><p>将<code>&lt;script&gt;</code>替换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第五步-更改默认转义规则"><a href="#第五步-更改默认转义规则" class="headerlink" title="第五步: 更改默认转义规则"></a>第五步: 更改默认转义规则</h2><p>打开<code>/node_modules\kramed\lib\rules\inline.js</code></p><p>1.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><h2 id="第六步-开启mathjax"><a href="#第六步-开启mathjax" class="headerlink" title="第六步: 开启mathjax"></a>第六步: 开启mathjax</h2><p>在<code>config.yml</code>文件 中开启 Mathjax</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> latex </tag>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SfM和SLAM项目总结</title>
      <link href="/2019/06/28/SfM%E5%92%8CSLAM%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/28/SfM%E5%92%8CSLAM%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：2019年6月27日，我进行了网易伏羲实验室虚拟人方向的电话面试。在电话中，我支支吾吾连自己的项目都讲不清楚。不管最后面试结果如何，自己做过的东西起码自己要懂。</p></blockquote><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h2><script type="math/tex; mode=display">\bf{a} \cdot \bf{b}=\bf{a}^T\bf{b}=\sum_{i=1}^3a_ib_i=|\bf{a}||\bf{b}|cos<\bf{a,b}></script><h2 id="外积"><a href="#外积" class="headerlink" title="外积"></a>外积</h2><script type="math/tex; mode=display">\bf{a} \times \bf{b} = \left[ \begin{array}{ccc}{\bf{i}} & {\bf{j}} & {\bf{k}}\\{a_1} & {a_2} & {a_3}\\{b_1} & {b_2} & {b_3}\end{array}\right]= \left[\begin{array}{c}{a_2b_3-a_3b_2}\\{a_3b_1-a_1b_3}\\{a_1b_2-a_2b_1}\end{array}\right]=\left[\begin{array}{ccc}{0} & {-a_3} & {a_2}\\{a_3} & {0} & {-a_1}\\{-a_2} & {a_1} & {0}\end{array}\right]\bf{b}\triangleq \bf{a} ^\wedge \bf{b}</script><p>相应的，有</p><script type="math/tex; mode=display">\boldsymbol{a}=[a_1\boldsymbol{i},a_2\boldsymbol{j},a_3\boldsymbol{k}],\\\boldsymbol{a}^{\wedge}=\boldsymbol{A}=\left[\begin{matrix}0&-a_3&a_2\\a_3&0&-a_1\\-a_2&a_1&0\\\end{matrix}\right],\\\boldsymbol{A}^{\vee}=\boldsymbol{a}</script><h3 id="特殊正交群-SO-3"><a href="#特殊正交群-SO-3" class="headerlink" title="特殊正交群 $SO(3)$"></a>特殊正交群 $SO(3)$</h3><script type="math/tex; mode=display">SO(3)=\{R\in\mathbb{R}^{3\times3}|RR^T=I,\det(R)=1\}</script><h3 id="特殊欧式群-SE-3"><a href="#特殊欧式群-SE-3" class="headerlink" title="特殊欧式群$SE(3)$"></a>特殊欧式群$SE(3)$</h3><script type="math/tex; mode=display">SE(3)=\{T=\left[\begin{matrix}R&t\\0^T&1\\\end{matrix}\right]\in\mathbb{R}^{4\times4}|R\in SO(3),t\in \mathbb{R}^3\}李代数$\mathfrak{so}(3)$</script><h3 id="李代数-mathfrak-so-3"><a href="#李代数-mathfrak-so-3" class="headerlink" title="李代数$\mathfrak{so}(3)$"></a>李代数$\mathfrak{so}(3)$</h3><p>在对$RR^T=I$进行求导及整理之后，可以得到$R(t)^{‘}R(t)^T$是一个反对称矩阵，那么就用一个$\phi(t)\in\mathbb{R}^3$与之对应。有：</p><script type="math/tex; mode=display">R(t)^{'}R(t)^T=\phi(t)^{\wedge}</script><p>之后求解微分方程，可以得到：</p><script type="math/tex; mode=display">R(t)=exp(\phi^{\wedge}t)</script><p>实际求解时利用到指数映射和对数映射。</p><h2 id="双目系统"><a href="#双目系统" class="headerlink" title="双目系统"></a>双目系统</h2><p><img src="/2019/06/28/SfM和SLAM项目总结/01.jpg" alt="01"></p><p><img src="/2019/06/28/SfM和SLAM项目总结/02.jpg" alt="02"></p><h2 id="单应矩阵"><a href="#单应矩阵" class="headerlink" title="单应矩阵"></a>单应矩阵</h2><h2 id="本质矩阵"><a href="#本质矩阵" class="headerlink" title="本质矩阵"></a>本质矩阵</h2><h2 id="基本矩阵"><a href="#基本矩阵" class="headerlink" title="基本矩阵"></a>基本矩阵</h2><h1 id="张正友标定法"><a href="#张正友标定法" class="headerlink" title="张正友标定法"></a>张正友标定法</h1><p><a href="https://www.researchgate.net/publication/3193178_A_Flexible_New_Technique_for_Camera_Calibration" target="_blank" rel="noopener">A Flexible New Technique for Camera Calibration</a></p><p>摘要：张正友标定法只需要相机观察几个（至少两个）不同方向上显示的平面图案。相机或平面图案都可以自由移动。且相机或标定板的运动不需要知道。张正友标定法对径向透镜畸变进行了建模。该方法由一个封闭形式的解组成，然后根据最大似然准则进行非线性改进。</p><h2 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h2><h3 id="针孔相机模型三维点到二维点投影矩阵"><a href="#针孔相机模型三维点到二维点投影矩阵" class="headerlink" title="针孔相机模型三维点到二维点投影矩阵"></a>针孔相机模型三维点到二维点投影矩阵</h3><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>$m=[u,v]^T$</td><td>二维点</td></tr><tr><td>$M=[X,Y,Z]^T$</td><td>三维点</td></tr><tr><td>$\widetilde{m}=[u,v,1]^T$</td><td>二维点齐次坐标</td></tr><tr><td>$\widetilde{M}=[X,Y,Z,1]^T$</td><td>三维点齐次坐标</td></tr><tr><td>s</td><td>随机尺度因子</td></tr><tr><td>$\bf{(R,t)}$</td><td>外参，即将世界坐标系和相机坐标系联系起来的旋转矩阵和位移向量</td></tr><tr><td>$\bf{A}$</td><td>相机内参矩阵</td></tr><tr><td>$\alpha,\beta$</td><td>分别为图像u轴和v轴的尺度因子</td></tr><tr><td>$u_0,v_0$</td><td>光心的图像坐标系坐标</td></tr><tr><td>$\gamma$</td><td>描述图像轴u,v之间的倾斜</td></tr></tbody></table></div><script type="math/tex; mode=display">s \widetilde{\bf{m}} = \bf{A[R\quad t]\widetilde{M}}</script><p>其中，</p><script type="math/tex; mode=display">A = \left[ \begin{array}{ccc} {\alpha} & {\gamma} & {u_0}\\ {0} & {\beta} & {v_0}\\ {0} & {0} & {1}\end{array}\right]</script><h3 id="标定板平面与图像之间的单应性矩阵"><a href="#标定板平面与图像之间的单应性矩阵" class="headerlink" title="标定板平面与图像之间的单应性矩阵"></a>标定板平面与图像之间的单应性矩阵</h3><p>这里假设标定板所在的平面为空间坐标系下的$Z=0$。</p><div class="table-container"><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>$\bf{r_i}$</td><td>旋转矩阵$\bf{R}$的第i列</td></tr></tbody></table></div><script type="math/tex; mode=display">s\left[\begin{array}{c}{u}\\{v}\\{1}\end{array}\right]=\bf{A}[\begin{array}{cccc}{\bf{r_1}}&{\bf{r_2}}&{\bf{r_3}}&{\bf{t}}\end{array}]\left[\begin{array}{c}{X}\\{Y}\\{0}\\{1}\end{array}\right]=A[\begin{array}{ccc}{\bf{r_1}}&{\bf{r_2}}&{\bf{t}}\end{array}]\left[\begin{array}{c}{X}\\{Y}\\{1}\end{array}\right]</script><p>即：</p><script type="math/tex; mode=display">s\widetilde{\bf{m}}=\bf{H\widetilde{M}}</script><p>其中，$\bf{H}$为单应矩阵，$\bf{H=A[\begin{array}{ccc}{\bf{r_1}}&amp;{\bf{r_2}}&amp;{\bf{t}}\end{array}]}$。</p><h3 id="内参约束"><a href="#内参约束" class="headerlink" title="内参约束"></a>内参约束</h3><p>假设$\bf{H}=\left[\begin{array}{ccc}{\bf{h_1}}&amp;{\bf{h_2}}&amp;{\bf{h_3}}\end{array}\right]$，根据单应关系有：</p><script type="math/tex; mode=display">\left[\begin{array}{ccc}{\bf{h_1}}&{\bf{h_2}}&{\bf{h_3}}\end{array}\right]=\lambda \bf{A}[\begin{array}{ccc}{\bf{r_1}}&{\bf{r_2}}&{\bf{t}}\end{array}]</script><p>根据$\bf{r_1}$和$\bf{r_2}$正交，有：</p><script type="math/tex; mode=display">\begin{split}h_1^TA^{-T}A^{-1}h_2=0 \\ h_1^TA^{-T}A^{-1}h_1= h_2^TA^{-T}A^{-1}h_2\end{split}</script><h3 id="几何解释"><a href="#几何解释" class="headerlink" title="几何解释"></a>几何解释</h3><h1 id="SfM"><a href="#SfM" class="headerlink" title="SfM"></a>SfM</h1><h2 id="三角化"><a href="#三角化" class="headerlink" title="三角化"></a>三角化</h2><h2 id="PnP"><a href="#PnP" class="headerlink" title="PnP"></a>PnP</h2><h1 id="SLAM"><a href="#SLAM" class="headerlink" title="SLAM"></a>SLAM</h1><h2 id="ORB-SLAM流程"><a href="#ORB-SLAM流程" class="headerlink" title="ORB_SLAM流程"></a>ORB_SLAM流程</h2><h2 id="g2o图优化"><a href="#g2o图优化" class="headerlink" title="g2o图优化"></a>g2o图优化</h2><h2 id="数据可视化VTK、Pangolin"><a href="#数据可视化VTK、Pangolin" class="headerlink" title="数据可视化VTK、Pangolin"></a>数据可视化VTK、Pangolin</h2><h1 id="Tower"><a href="#Tower" class="headerlink" title="Tower"></a>Tower</h1>]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SfM </tag>
            
            <tag> SLAM </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 单目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和、差分、线段树与树状数组</title>
      <link href="/2019/06/08/%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E3%80%81%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2019/06/08/%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E3%80%81%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><ul><li>时间复杂度：O（n）</li><li>适用于：单点更新，区间查询</li></ul><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>C[1] = C[0001] = A[1];<br>C[2] = C[0010] = A[1]+A[2];<br>C[3] = C[0011] = A[3];<br>C[4] = C[0100] = A[1]+A[2]+A[3]+A[4];<br>C[5] = C[0101] = A[5];<br>C[6] = C[0110] = A[5]+A[6];<br>C[7] = C[0111] = A[7];<br>C[8] = C[1000] = A[1]+A[2]+A[3]+A[4]+A[5]+A[6]+A[7]+A[8];</p></blockquote><p>即：</p><ul><li>$C[i]=A[i-2^k+1]+A[i-2^k+2]+\dots+A[i];$ </li><li>$k$为 $i$ 的二进制中从最低位到高位连续零的长度。</li><li>$2^k$可通过$i\&amp;-i$获得。</li></ul><blockquote><p>补码为原码取反后加1，如果将补码+1进位，那么最末尾的1和原码最右边的1一定是同一个位置</p></blockquote><h3 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单点更新"><a href="#单点更新" class="headerlink" title="单点更新"></a>单点更新</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> index,<span class="keyword">int</span> diff,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * arr：树状数组</span></span><br><span class="line"><span class="comment">    * index：待更新的位置</span></span><br><span class="line"><span class="comment">    * diff：改变的值</span></span><br><span class="line"><span class="comment">    * len：树状数组长度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;=len;i+=lowbit(i))</span><br><span class="line">        arr[i] += diff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * arr：树状数组</span></span><br><span class="line"><span class="comment">    * x：求从1到x的和</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=lowbit(i))</span><br><span class="line">        ans += arr[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t &amp; (-t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (t &lt;= n)&#123;</span><br><span class="line">        a[t] += d;</span><br><span class="line">        t = t + lowbit(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        sum += a[t];</span><br><span class="line">        t = t - lowbit(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, k, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    k= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">            insert(i, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, k++);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">"End"</span>)   <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> x, y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="keyword">if</span> (str == <span class="string">"Query"</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, getSum(y) - getSum(x - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"Add"</span>)</span><br><span class="line">                insert(x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"Sub"</span>)</span><br><span class="line">                insert(x, -y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="模板一、RMQ，查询区间最值下标"><a href="#模板一、RMQ，查询区间最值下标" class="headerlink" title="模板一、RMQ，查询区间最值下标"></a>模板一、RMQ，查询区间最值下标</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXIND 256 <span class="comment">//线段树节点个数  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//构建线段树,目的:得到M数组.  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> M[], <span class="keyword">int</span> A[])</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (b == e)  </span><br><span class="line">        M[node] = b; <span class="comment">//只有一个元素,只有一个下标  </span></span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;   </span><br><span class="line">        build(<span class="number">2</span> * node, b, (b + e) / <span class="number">2</span>, M, A);  </span><br><span class="line">        build(<span class="number">2</span> * node + <span class="number">1</span>, (b + e) / <span class="number">2</span> + <span class="number">1</span>, e, M, A);  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (A[M[<span class="number">2</span> * node]] &lt;= A[M[<span class="number">2</span> * node + <span class="number">1</span>]])  </span><br><span class="line">        M[node] = M[<span class="number">2</span> * node];  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        M[node] = M[<span class="number">2</span> * node + <span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//找出区间 [i, j] 上的最小值的索引  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> M[], <span class="keyword">int</span> A[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> p1, p2;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//查询区间和要求的区间没有交集  </span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; e || j &lt; b)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (b &gt;= i &amp;&amp; e &lt;= j)  </span><br><span class="line">        <span class="keyword">return</span> M[node];  </span><br><span class="line"> </span><br><span class="line">    p1 = query(<span class="number">2</span> * node, b, (b + e) / <span class="number">2</span>, M, A, i, j);  </span><br><span class="line">    p2 = query(<span class="number">2</span> * node + <span class="number">1</span>, (b + e) / <span class="number">2</span> + <span class="number">1</span>, e, M, A, i, j);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//return the position where the overall  </span></span><br><span class="line">    <span class="comment">//minimum is  </span></span><br><span class="line">    <span class="keyword">if</span> (p1 == <span class="number">-1</span>)  </span><br><span class="line">        <span class="keyword">return</span> M[node] = p2;  </span><br><span class="line">    <span class="keyword">if</span> (p2 == <span class="number">-1</span>)  </span><br><span class="line">        <span class="keyword">return</span> M[node] = p1;  </span><br><span class="line">    <span class="keyword">if</span> (A[p1] &lt;= A[p2])  </span><br><span class="line">        <span class="keyword">return</span> M[node] = p1;  </span><br><span class="line">    <span class="keyword">return</span> M[node] = p2;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> M[MAXIND]; <span class="comment">//下标1起才有意义,否则不是二叉树,保存下标编号节点对应区间最小值的下标.  </span></span><br><span class="line">    <span class="built_in">memset</span>(M,<span class="number">-1</span>,<span class="keyword">sizeof</span>(M));  </span><br><span class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;  </span><br><span class="line">    build(<span class="number">1</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>])<span class="number">-1</span>, M, a);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>])<span class="number">-1</span>, M, a, <span class="number">0</span>, <span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板二、连续区间修改或者单节点更新的动态查询问题-（此模板查询区间和）"><a href="#模板二、连续区间修改或者单节点更新的动态查询问题-（此模板查询区间和）" class="headerlink" title="模板二、连续区间修改或者单节点更新的动态查询问题 （此模板查询区间和）"></a>模板二、连续区间修改或者单节点更新的动态查询问题 （此模板查询区间和）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l , m , rt &lt;&lt; 1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1 , r , rt &lt;&lt; 1 | 1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> root 1 , N , 1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long  </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111111</span>;  </span><br><span class="line">LL add[maxn&lt;&lt;<span class="number">2</span>];  </span><br><span class="line">LL sum[maxn&lt;&lt;<span class="number">2</span>];  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;  </span><br><span class="line">    sum[rt] = sum[rt&lt;&lt;<span class="number">1</span>] + sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> m)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (add[rt]) &#123;  </span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>] += add[rt];  </span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += add[rt];  </span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>] += add[rt] * (m - (m &gt;&gt; <span class="number">1</span>));  </span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += add[rt] * (m &gt;&gt; <span class="number">1</span>);  </span><br><span class="line">        add[rt] = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;  </span><br><span class="line">    add[rt] = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sum[rt]);  </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    build(lson);  </span><br><span class="line">    build(rson);  </span><br><span class="line">    PushUp(rt);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> c,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;  </span><br><span class="line">        add[rt] += c;  </span><br><span class="line">        sum[rt] += (LL)c * (r - l + <span class="number">1</span>);  </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    PushDown(rt , r - l + <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) update(L , R , c , lson);  </span><br><span class="line">    <span class="keyword">if</span> (m &lt; R) update(L , R , c , rson);  </span><br><span class="line">    PushUp(rt);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;  </span><br><span class="line">        <span class="keyword">return</span> sum[rt];  </span><br><span class="line">    &#125;  </span><br><span class="line">    PushDown(rt , r - l + <span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    LL ret = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (L &lt;= m) ret += query(L , R , lson);  </span><br><span class="line">    <span class="keyword">if</span> (m &lt; R) ret += query(L , R , rson);  </span><br><span class="line">    <span class="keyword">return</span> ret;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> N , Q;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;Q);  </span><br><span class="line">    build(root);  </span><br><span class="line">    <span class="keyword">while</span> (Q --) &#123;  </span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">2</span>];  </span><br><span class="line">        <span class="keyword">int</span> a , b , c;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,op);  </span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'Q'</span>) &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(a , b ,root));  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);  </span><br><span class="line">            update(a , b , c , root);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p>有数组A，数组A对应的前缀和数组为S，有：</p><script type="math/tex; mode=display">S[k]=\sum_{i=0}^{k}A[i]</script><p>由此方便了范围查询：</p><script type="math/tex; mode=display">\sum_{i=L}^RA[i]=S[R]-S[L-1]</script><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>对于二维数组A，数组A对应的前缀和数组为S，有：</p><script type="math/tex; mode=display">S[i][j]=\sum_{m=0}^i\sum_{n=0}^jA[i][j]</script><p>计算时二维前缀和时，可以使用递推公式：</p><script type="math/tex; mode=display">S[i][j]=A[i][j]+S[i-1][j]+S[i][j-1]-S[i-1][j-1]</script><p>当求被点$(x_1,y_1)$和点$(x_2,y_2)$围起来的元素的和时，可以使用：</p><script type="math/tex; mode=display">\sum_{i=x_1}^{x_2}\sum_{j=y_1}^{y_2}A[i][j]=S[x_2][y_2]-S[x_1-1][y2]-S[x_2][y_1-1]+S[x_1-1][y_1-1]</script><h2 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h2><p>差分可解决范围更新的问题。</p><p>思想：</p><ul><li>延后更新</li><li>更新的起点和终点</li><li>利用前缀和</li></ul><p>样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,n,m,p;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> L,R,t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t&gt;&gt;L&gt;&gt;R&gt;&gt;p;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">b[L]+=p;b[R+<span class="number">1</span>]-=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">b[L]-=p;b[R+<span class="number">1</span>]+=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> add=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">add+=b[i];</span><br><span class="line">a[i]+=a[i<span class="number">-1</span>]+add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[y]-a[x<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串匹配算法Sunday</title>
      <link href="/2019/06/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95Sunday/"/>
      <url>/2019/06/07/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95Sunday/</url>
      
        <content type="html"><![CDATA[<p>Sunday算法在匹配失败时关注的是主串中参加匹配的最末位字符的下一位字符。</p><ul><li>如果该字符没有在模式串中出现则直接跳过，即移动位数 = 模式串长度 + 1；</li><li>否则，其移动位数 = 模式串长度 - 该字符最右出现的位置(以0开始) = 模式串中该字符最右出现的位置到尾部的距离 + 1。</li></ul><h2 id="偏移表"><a href="#偏移表" class="headerlink" title="偏移表"></a>偏移表</h2><p>在预处理中，计算偏移表。</p><script type="math/tex; mode=display">shift[w] =\begin{cases} m - max\{i < m  | P[i] = w\}  & \mbox{ if } w \mbox{ is in } P[0..m-1] \\m + 1 & \mbox{ otherwise }\end{cases}</script><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> charnum = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">int</span> shift[charnum];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sunday</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; T, <span class="keyword">const</span> <span class="built_in">string</span>&amp; P)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = T.length();</span><br><span class="line">    <span class="keyword">int</span> m = P.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charnum; i++) &#123;</span><br><span class="line">        shift[i] = m + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        shift[P[i]] = m - i; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j; </span><br><span class="line">    <span class="keyword">while</span>(s &lt;= n - m) &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(T[s + j] == P[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= m) &#123;</span><br><span class="line">                <span class="keyword">return</span> s; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        s += shift[T[s + m]];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLAM之单目视觉里程计</title>
      <link href="/2019/05/12/SLAM%E4%B9%8B%E5%8D%95%E7%9B%AE%E8%A7%86%E8%A7%89%E9%87%8C%E7%A8%8B%E8%AE%A1/"/>
      <url>/2019/05/12/SLAM%E4%B9%8B%E5%8D%95%E7%9B%AE%E8%A7%86%E8%A7%89%E9%87%8C%E7%A8%8B%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="SLAM之单目视觉里程计"><a href="#SLAM之单目视觉里程计" class="headerlink" title="SLAM之单目视觉里程计"></a>SLAM之单目视觉里程计</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="旋转矩阵和位移矩阵"><a href="#旋转矩阵和位移矩阵" class="headerlink" title="旋转矩阵和位移矩阵"></a>旋转矩阵和位移矩阵</h3><p>建议参考计算机图形学教材，学习“图形变换”章节。重点掌握以下概念：</p><ul><li>旋转矩阵</li><li>平移向量</li><li>齐次坐标</li><li>变换矩阵（旋转矩阵与平移向量的结合）</li></ul><p>参考：</p><ul><li><a href="https://blog.csdn.net/csxiaoshui/article/details/65446125#" target="_blank" rel="noopener">旋转变换（一）旋转矩阵</a></li><li><a href="https://www.cnblogs.com/flyinggod/p/8144100.html" target="_blank" rel="noopener">旋转矩阵、欧拉角、四元数理论及其转换关系</a></li></ul><h3 id="三个坐标系"><a href="#三个坐标系" class="headerlink" title="三个坐标系"></a>三个坐标系</h3><p><strong>图像坐标系</strong>： 一般来说，图像坐标系包括像素坐标系以及物理坐标系。</p><p><img src="/2019/05/12/SLAM之单目视觉里程计/01.jpg" alt="图像坐标系"></p><p>对于图像直角坐标系上的坐标$(u,v)$，分别能从像素的行数和列数得到，叫做像素坐标系。为表示像素点在图像中的位置我们需要借助物理坐标系，以图像中某一点$O_{1}$当作原点建立坐标系，其中$x$轴，$y$轴分别与像素坐标系的横、竖轴平行，方向一致。其中$(x, y)$坐标单位为毫米，$O_{1}$在$(u, v)$坐标系下的坐标为$\left(u_{0}, v_{0}\right)$，$d_{x}$和$d_y$表示每个像素点在$x$,$y$轴上的尺寸大小，则有：</p><script type="math/tex; mode=display">\left\{\begin{array}{l}{u=\frac{x}{d x}+u_{0}} \\ {v=\frac{y}{d y}+v_{0}}\end{array}\right.</script><p>即：</p><script type="math/tex; mode=display">\left[ \begin{array}{c}{u} \\ {v} \\ {1}\end{array}\right]=\left[ \begin{array}{ccc}{\frac{1}{d x}} & {0} & {u_{0}} \\ {0} & {\frac{1}{d y}} & {v_{0}} \\ {0} & {0} & {1}\end{array}\right] \left[ \begin{array}{l}{x} \\ {y} \\ {1}\end{array}\right]</script><p><strong>相机坐标系</strong>：相机坐标系原点位于光心。如图所示，相机光心为点$O$，$Z_{c}$与像平面垂直，为相机的光轴，$X_{c}, Y_{c}$分别与$x,y$轴相平行，焦距大小为线段$O O_{1}$的长度，则将$O-X_{c} Y_{c} Z_{c}$坐标系称作相机坐标系。</p><p><img src="/2019/05/12/SLAM之单目视觉里程计/02.jpg" alt="相机坐标系"></p><p><strong>世界坐标系</strong>:世界坐标系可以对场景的中的任何物体进行描述，同时能表示出相机坐标。如上图中，将坐标系$O_{w}-X_{w} Y_{w} Z_{w}$称为世界坐标系，其与相机坐标系的相互变换可以通过$3 \times 1$的平移向量$t$以及$3\times 3$的旋转矩阵$R$来表示，设点$P$在世界坐标系中的齐次坐标为$\left(X_{w}, Y_{w}, Z_{w}, 1\right)^{T}$，在相机坐标系中的齐次坐标为$\left(X_{c}, Y_{c}, Z_{c}, 1\right)^{T}$，那么二者的转换关系为： </p><script type="math/tex; mode=display">\left[ \begin{array}{c}{X_{c}} \\ {Y_{c}} \\ {Z_{c}} \\ {1}\end{array}\right]=\left[ \begin{array}{cc}{R} & {t} \\ {0^{T}} & {1}\end{array}\right] \left[ \begin{array}{c}{X_{w}} \\ {Y_{w}} \\ {Z_{w}} \\ {1}\end{array}\right]=M_{1} \left[ \begin{array}{c}{X_{w}} \\ {Y_{w}} \\ {Z_{w}} \\ {1}\end{array}\right]</script><h2 id="针孔相机模型"><a href="#针孔相机模型" class="headerlink" title="针孔相机模型"></a>针孔相机模型</h2><p>针孔相机模型是将空间坐标映射到图像点的模型。</p><p>请阅读: 视觉SLAM十四讲 5.1.1</p><p>对于使用的数据集，一般会提供拍摄照片所用的相机的内参和畸变系数。如果使用自己的相机，则需要采用张正友标定法进行相机标定，以获取相机内参及畸变系数。</p><p>最终有：</p><script type="math/tex; mode=display">Z \boldsymbol{P}_{u v}=Z \left[ \begin{array}{c}{u} \\ {v} \\ {1}\end{array}\right]=\boldsymbol{K}\left(\boldsymbol{R} \boldsymbol{P}_{w}+\boldsymbol{t}\right)=\boldsymbol{K} T \boldsymbol{P}_{w}</script><p>其中$Z$为空间点三维坐标中的$Z$坐标值，$P_{uv}$代表空间点投影到像平面，在像平面上的坐标，$K$为相机内参，$R$为相机外参中的旋转矩阵，$t$为相机外参中的位移向量，$P_w$为空间点在世界坐标系下的三维坐标。其中：</p><script type="math/tex; mode=display">K=\left( \begin{array}{ccc}{f_{x}} & {0} & {c_{x}} \\ {0} & {f_{y}} & {c_{y}} \\ {0} & {0} & {1}\end{array}\right)</script><h2 id="单目视觉里程计"><a href="#单目视觉里程计" class="headerlink" title="单目视觉里程计"></a>单目视觉里程计</h2><p>单目视觉里程计主要需要了解<strong>对极约束</strong>、<strong>三角化</strong>和<strong>PnP</strong>。</p><p><strong>对极约束</strong></p><p>对极约束用于通过二维点之间的匹配关系，求解相邻两张图像之间的运动。关于对极约束的内容，请阅读视觉SLAM十四讲7.3，7.4。</p><p>使用对极约束求解本质矩阵可以通过调用opencv中的findEssentialMat函数完成。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function">Mat <span class="title">findEssentialMat</span><span class="params">( </span></span></span><br><span class="line"><span class="function"><span class="params">    InputArray points1, </span></span></span><br><span class="line"><span class="function"><span class="params">    InputArray points2,</span></span></span><br><span class="line"><span class="function"><span class="params">    InputArray cameraMatrix, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> method = RANSAC,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">double</span> prob = <span class="number">0.999</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">double</span> threshold = <span class="number">1.0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    OutputArray mask = noArray())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例调用</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat E = findEssentialMat(p1, p2, M);</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>points1与points2是vector<point2f>类型，两vector的size相同，对应位置上的Point2f互相匹配。</point2f></li><li>cameraMatrix是相机内参矩阵</li><li>method是计算方法，RANSAC是openCV中被define的常量，表示采用RANSAC方法进行本征矩阵计算</li><li>prob是估计矩阵正确的可信度</li><li>参数threshold用于RANSAC的参数。 它是从点到极线的最大距离（以像素为单位），超出此点时，该点被视为异常值，不用于计算最终的基本矩阵。 根据点定位精度，图像分辨率和图像噪声的不同，可将其设置为1-3。</li><li>参数mask输出N个元素的数组，其中每个元素对于异常值设置为0，对其他点设置为1。</li></ul><p>求解出本征矩阵E后，调用recoverPose求解旋转矩阵和位移向量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recoverPose</span><span class="params">(Mat E,</span></span></span><br><span class="line"><span class="function"><span class="params">                InputArray points1,</span></span></span><br><span class="line"><span class="function"><span class="params">                InputArray points2,</span></span></span><br><span class="line"><span class="function"><span class="params">                InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">                OutputArray R,</span></span></span><br><span class="line"><span class="function"><span class="params">                OutputArray t,</span></span></span><br><span class="line"><span class="function"><span class="params">                OutputArray mask = noArray())</span></span>; </span><br><span class="line"><span class="comment">//示例调用</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">int</span> pass_count = recoverPose(E,p1, p2, M, R, t,mask);</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>E是经过findEssentialMat求解出的本征矩阵</li><li>points1，points2，cameraMatrix，mask与findEssentialMat函数中的意义相同</li><li>R是求解出的旋转矩阵</li><li>t是求解出的位移向量</li></ul><p>R和t组成变换矩阵T，这里的T是是第一张图到第二张图的坐标变换矩阵。或者可以理解为第一张图相机相对于相机初始位置的变换矩阵是X。因为第一张图相机所处的位置是初始位置，所以有：$X = eye(4)$，其中$eye(4)$是四阶单位矩阵。那么T左乘X是第二个图的相机的坐标变换矩阵。</p><p>对极约束可以求解出两张图像之间的相机变换矩阵，但是它是2D和2D之间求解的变换矩阵，t的尺度无法确定，t可能是1米，可能是1cm。</p><p><strong>三角化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reconstruct</span><span class="params">(Mat&amp; K, Mat&amp; R1, Mat&amp; T1, Mat&amp; R2, Mat&amp; T2, <span class="built_in">vector</span>&lt;Point2f&gt;&amp; p1, <span class="built_in">vector</span>&lt;Point2f&gt;&amp; p2, <span class="built_in">vector</span>&lt;Point3f&gt;&amp; structure)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//两个相机的投影矩阵[R T]，triangulatePoints只支持float型</span></span><br><span class="line"><span class="function">Mat <span class="title">proj1</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>, CV_32FC1)</span></span>;</span><br><span class="line"><span class="function">Mat <span class="title">proj2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>, CV_32FC1)</span></span>;</span><br><span class="line"></span><br><span class="line">R1.convertTo(proj1(Range(<span class="number">0</span>, <span class="number">3</span>), Range(<span class="number">0</span>, <span class="number">3</span>)), CV_32FC1);</span><br><span class="line">T1.convertTo(proj1.col(<span class="number">3</span>), CV_32FC1);</span><br><span class="line"></span><br><span class="line">R2.convertTo(proj2(Range(<span class="number">0</span>, <span class="number">3</span>), Range(<span class="number">0</span>, <span class="number">3</span>)), CV_32FC1);</span><br><span class="line">T2.convertTo(proj2.col(<span class="number">3</span>), CV_32FC1);</span><br><span class="line"></span><br><span class="line">Mat fK;</span><br><span class="line">K.convertTo(fK, CV_32FC1);</span><br><span class="line">proj1 = fK*proj1;</span><br><span class="line">proj2 = fK*proj2;</span><br><span class="line"><span class="comment">//三角重建</span></span><br><span class="line">Mat s;</span><br><span class="line">triangulatePoints(proj1, proj2, p1, p2, s);</span><br><span class="line"></span><br><span class="line">structure.clear();</span><br><span class="line">structure.reserve(s.cols);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.cols; ++i)</span><br><span class="line">&#123;</span><br><span class="line">Mat_&lt;<span class="keyword">float</span>&gt; col = s.col(i);</span><br><span class="line">col /= col(<span class="number">3</span>);  <span class="comment">//齐次坐标，需要除以最后一个元素才是真正的坐标值</span></span><br><span class="line">structure.push_back(Point3f(col(<span class="number">0</span>), col(<span class="number">1</span>), col(<span class="number">2</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三角化在得到两个相机的旋转矩阵、位移向量后，可以根据匹配的特征点进行三角化，最终能够求得特征点对应的空间点云的坐标。</p><p><strong>PnP</strong></p><p>PnP在得知了对应的空间点的三维坐标和新加入的图像中的特征点的二维坐标之后，可以求解新加入的图像的相机的旋转矩阵和位移向量。</p><p>参考<a href="https://blog.csdn.net/jay463261929/article/details/53818611" target="_blank" rel="noopener">opencv中solvePnPRansac函数求解相机位姿</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solvePnPRansac</span><span class="params">(InputArray objectPoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                    InputArray imagePoints,</span></span></span><br><span class="line"><span class="function"><span class="params">                    InputArray cameraMatrix,</span></span></span><br><span class="line"><span class="function"><span class="params">                    InputArray dist，</span></span></span><br><span class="line"><span class="function"><span class="params">                    OutputArray rvec,</span></span></span><br><span class="line"><span class="function"><span class="params">                    OutputArray tvec,</span></span></span><br><span class="line"><span class="function"><span class="params">                    ...)</span></span>;</span><br><span class="line"><span class="comment">//调用示例</span></span><br><span class="line">solvePnPRansac(object_points, image_points, K, noArray(), r, T);</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><p>objectPoints为三维坐标，imagePoints为二维坐标，对应位置的坐标互相匹配。</p></li><li><p>cameraMatrix为相机内参。</p></li><li>dist为畸变参数矩阵。</li><li>rvec为求解出的相机<strong><em>旋转向量</em></strong>，不是旋转矩阵。可经过罗德里格斯变换获取旋转矩阵。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rodrigues(r, R);</span><br></pre></td></tr></table></figure><ul><li>tvec为求解出的相机位移向量。</li></ul><p>这里的objectPoints为原有空间点云三维坐标。imagePoints为新加入的一张图像中的特征点的图像坐标。假设刚开始运行程序时候，点云$C_{12}$由前两张图像的相机的旋转矩阵、位移向量和匹配的特征点经过三角化求解出来。</p><p>上述过程涉及到的前两张图像中第一张图像的相机旋转矩阵为三阶单位矩阵，位移向量为0，即第一张图像的相机处于起始位置；第二张图像的旋转矩阵和位移向量通过对极几何被求解出来。</p><p>进行求解PnP需要构建已有空间点云三维坐标和新加入图像中的特征点二维坐标的匹配关系。那么这个关系是怎么建立的呢？是在图一、图二进行三角化生成空间点云时候，会生成空间点云中点与图二中特征点的匹配关系。图二与图三进行匹配，可获得图二与图三中特征点的匹配关系。由此可获得图三中特征点与原有空间点云中点的匹配关系。</p><p>程序经过一次PnP，求解出第三张图像的相机的旋转矩阵和位移矩阵后，可以使用第三张图像的相机的旋转矩阵和位移向量与第二张图像的旋转矩阵和位移向量进行三角化，生成第二张图像和第三张图像共同构建的空间点云$C_{23}$。</p><p>之后，空间点云可以进行点的添加和旧点的消除，每次新加入的一张图像的相机位姿可以通过PnP求解出来。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>【1】《视觉SLAM十四讲》 —— 高翔</p><p>【2】 葛均强. 基于无人机航拍图像序列的三维重建研究与实现[D]. 电子科技大学,2015.</p><p>【3】<a href="https://www.bilibili.com/video/av5987715?from=search&amp;seid=17088161877399053008" target="_blank" rel="noopener">线性代数的本质——3blue1brown</a></p>]]></content>
      
      
      <categories>
          
          <category> SLAM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLAM </tag>
            
            <tag> 机器视觉 </tag>
            
            <tag> 单目 </tag>
            
            <tag> 视觉里程计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ技巧</title>
      <link href="/2019/05/10/OJ%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/05/10/OJ%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="OJ中的奇技淫巧"><a href="#OJ中的奇技淫巧" class="headerlink" title="OJ中的奇技淫巧"></a>OJ中的奇技淫巧</h1><h2 id="使用异或进行swap"><a href="#使用异或进行swap" class="headerlink" title="使用异或进行swap"></a>使用异或进行swap</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a,<span class="keyword">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">    a=a^b;</span><br><span class="line">    b=a^b;</span><br><span class="line">    a=a^b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单行多字符串处理"><a href="#单行多字符串处理" class="headerlink" title="单行多字符串处理"></a>单行多字符串处理</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s);</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss&lt;&lt;s;</span><br><span class="line">    <span class="keyword">while</span>(ss&gt;&gt;s)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加快cin速度"><a href="#加快cin速度" class="headerlink" title="加快cin速度"></a>加快cin速度</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="while和scanf"><a href="#while和scanf" class="headerlink" title="while和scanf"></a>while和scanf</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读到文件的结尾，程序自动结束</span></span><br><span class="line"><span class="keyword">while</span>( ( <span class="built_in">scanf</span>( <span class="string">" %d "</span> ,&amp;a) ) != <span class="number">-1</span> )</span><br><span class="line"><span class="keyword">while</span>( ( <span class="built_in">scanf</span>( <span class="string">" %d "</span> ,&amp;a) ) != EOF)</span><br><span class="line"><span class="keyword">while</span>( ( <span class="built_in">scanf</span>( <span class="string">" %d "</span> ,&amp;a) ) == <span class="number">1</span> )</span><br><span class="line"><span class="keyword">while</span>( ~( <span class="built_in">scanf</span>( <span class="string">" %d "</span> ,&amp;a) ) )</span><br><span class="line"><span class="comment">//读到一个 0 时，程序结束</span></span><br><span class="line"><span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">" %d "</span> ,&amp;a) ,a)</span><br><span class="line"><span class="comment">//读到多个0时，程序结束</span></span><br><span class="line"><span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">" %d%d%d "</span> ,&amp;a,&amp;b,&amp;c),a+b+c ) <span class="comment">//a,b,c非负</span></span><br><span class="line"><span class="keyword">while</span>( <span class="built_in">scanf</span>( <span class="string">" %d%d%d "</span> ,&amp;a,&amp;b,&amp;c),a|b|c )</span><br></pre></td></tr></table></figure><h2 id="vector定义二维数组"><a href="#vector定义二维数组" class="headerlink" title="vector定义二维数组"></a>vector定义二维数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len=<span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(len,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(len,<span class="number">0</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs229</title>
      <link href="/2019/05/10/cs229/"/>
      <url>/2019/05/10/cs229/</url>
      
        <content type="html"><![CDATA[<h1 id="CS229"><a href="#CS229" class="headerlink" title="CS229"></a>CS229</h1><ul><li><a href="https://github.com/econti/cs229" target="_blank" rel="noopener">课程讲义</a></li><li><a href="https://blog.csdn.net/blackyuanc/article/details/68951640" target="_blank" rel="noopener">CSDN博主中文翻译</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro装机配置</title>
      <link href="/2019/05/09/manjaro%E8%A3%85%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/05/09/manjaro%E8%A3%85%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源:"></a>配置镜像源:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>打开配置文件sudo nano /etc/pacman.conf在文件末尾添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure></p><h2 id="导入GPG-Key"><a href="#导入GPG-Key" class="headerlink" title="导入GPG Key"></a>导入GPG Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy</span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S vim cmake firefox-i18n-zh-cn gdb nodejs fcitx-im fcitx-configtool fcitx-sogoupinyin yarn visual-studio-code-bin texmaker </span><br><span class="line">sudo pacman -S google-chrome deepin.com.qq.office netease-cloud-music typora vlc wewechat wps-office ttf-wps-fonts</span><br><span class="line">sudo pacman -S mysql eclipse-jee opencv webstorm clion pycharm-professional intellij-idea-ultimate-edition qtcreator qt4 maven android-studio nginx</span><br></pre></td></tr></table></figure><h2 id="配置搜狗环境"><a href="#配置搜狗环境" class="headerlink" title="配置搜狗环境"></a>配置搜狗环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.xprofile</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br></pre></td></tr></table></figure><h2 id="配置firefox"><a href="#配置firefox" class="headerlink" title="配置firefox"></a>配置firefox</h2><p>地址栏输入about:config</p><p>搜索intl.locale.requested 将其值修改为zh_CN</p><h2 id="配置yarn"><a href="#配置yarn" class="headerlink" title="配置yarn"></a>配置yarn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn global bin</span><br><span class="line">sudo vim /etc/profile </span><br><span class="line">appendpath &apos;/home/douxl/.yarn/bin&apos;</span><br></pre></td></tr></table></figure><h2 id="禁用pcspkr"><a href="#禁用pcspkr" class="headerlink" title="禁用pcspkr"></a>禁用pcspkr</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rmmod pcspkr</span><br><span class="line">sudo vim /etc/modprobe.d/nobeep.conf</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist pcspkr</span><br></pre></td></tr></table></figure><h2 id="nodejs包"><a href="#nodejs包" class="headerlink" title="nodejs包"></a>nodejs包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add hexo vue-cli</span><br></pre></td></tr></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>输入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="python-包"><a href="#python-包" class="headerlink" title="python 包"></a>python 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy pandas sklearn matplotlib requests minepy</span><br></pre></td></tr></table></figure><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;douxl5516@163.com&quot;</span><br><span class="line">git config --global user.name &quot;douxl5516&quot;</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="与windows时间同步"><a href="#与windows时间同步" class="headerlink" title="与windows时间同步"></a>与windows时间同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-local-rtc 1</span><br></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;douxl5516@163.com&quot;</span><br></pre></td></tr></table></figure><h2 id="WPS字体缺失问题"><a href="#WPS字体缺失问题" class="headerlink" title="WPS字体缺失问题"></a>WPS字体缺失问题</h2><p>国外下载地址：<a href="https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip" target="_blank" rel="noopener">https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps_symbol_fonts.zip</a></p><p>国内下载地址：<a href="https://pan.baidu.com/s/1eS6xIzo" target="_blank" rel="noopener">https://pan.baidu.com/s/1eS6xIzo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo cp * /usr/share/fonts</span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line">sudo <span class="built_in">fc</span>-cache</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研中用到的数学基础</title>
      <link href="/2019/05/04/%E7%A7%91%E7%A0%94%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/05/04/%E7%A7%91%E7%A0%94%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h1><h2 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h2><blockquote><p>在泛函分析中，它定义在赋范线性空间中，并满足一定的条件，即①非负性；②齐次性；③三角不等式。它常常被用来度量某个向量空间（或矩阵）中的每个向量的长度或大小。</p></blockquote><ul><li>LP范数不是一个范数，而是一组范数。定义如下：</li></ul><script type="math/tex; mode=display">L_p=\Vert x \Vert_p=\sqrt[p]{\sum_{i=1}^{n}{x_i^p}},x=(x_1,x_2,\dots,x_n)</script><ul><li>L0范数表示向量中非零元素的个数。</li><li>L1范数表示向量x中非零元素的绝对值之和。定义如下：</li></ul><script type="math/tex; mode=display">L_1=\Vert x \Vert_1=\sum_{i=1}^{n}{|x_i|},x=(x_1,x_2,\dots,x_n)</script><ul><li><p>L2范数表示向量元素的平方和再开平方，即欧氏距离。</p><p>二范数指矩阵A的2范数，就是A的转置共轭矩阵与矩阵A的积的最大特征根的平方根值，是指空间上两个向量矩阵的直线距离。类似于求棋盘上两点间的直线距离。</p><p>定义如下：</p></li></ul><script type="math/tex; mode=display">L_2=\Vert x \Vert_2=\sqrt{\sum_{i=1}^{n}{x_i^2}},x=(x_1,x_2,\dots,x_n)</script><ul><li><a href="https://baike.baidu.com/item/%E8%8C%83%E6%95%B0/10856788?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://blog.csdn.net/a493823882/article/details/80569888" target="_blank" rel="noopener">几种范数</a></li></ul><h2 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h2><p>即对于一般标量函数$f(x)$ , 其中向量为$x=(x_1,x_2,\dots,x_n)$，导数为：</p><script type="math/tex; mode=display">\frac{\partial{f}}{\partial{x}}=(\frac{\partial{f}}{\partial{x_1}},\dots,\frac{\partial{f}}{\partial{x_2}})</script><h2 id="雅可比矩阵"><a href="#雅可比矩阵" class="headerlink" title="雅可比矩阵"></a>雅可比矩阵</h2><blockquote><p>在向量微积分中，雅可比矩阵(Jacobi Matrix)是一阶偏导数以一定方式排列成的矩阵，其行列式称为雅可比行列式。雅可比矩阵的重要性在于它体现了一个可微方程与给出点的最优线性逼近。因此，雅可比矩阵类似于多元函数的导数。</p></blockquote><script type="math/tex; mode=display">J(f)=\left|\frac{\partial{(f_1,\dots,f_n)}}{\partial{(x_1,\dots,x_n)}}\right|=\left|\begin{matrix}\frac{\partial{f_1}}{\partial{x_1}}&\dots&\frac{\partial{f_1}}{\partial{x_n}}\\\vdots&\ddots&\vdots\\\frac{\partial{f_n}}{\partial{x_1}}&\dots&\frac{\partial{f_n}}{\partial{x_n}}\\\end{matrix}\right|</script><p>若m=n，则雅可比矩阵为<strong>方阵</strong>，方阵的行列式为<strong>雅可比行列式</strong>。</p><ul><li><a href="https://baike.baidu.com/item/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5/10753754?fr=aladdin" target="_blank" rel="noopener">雅可比矩阵</a></li></ul><h2 id="海森矩阵"><a href="#海森矩阵" class="headerlink" title="海森矩阵"></a>海森矩阵</h2><blockquote><p>黑塞矩阵（Hessian Matrix），又译作海森矩阵、海瑟矩阵、海塞矩阵等，是一个多元函数的二阶偏导数构成的方阵，描述了函数的局部曲率。黑塞矩阵最早于19世纪由德国数学家Ludwig Otto Hesse提出，并以其名字命名。黑塞矩阵常用于牛顿法解决优化问题，利用黑塞矩阵可判定多元函数的极值问题。在工程实际问题的优化设计中，所列的目标函数往往很复杂，为了使问题简化，常常将目标函数在某点邻域展开成泰勒多项式来逼近原函数，此时函数在某点泰勒展开式的矩阵形式中会涉及到黑塞矩阵。</p></blockquote><script type="math/tex; mode=display">H(f)=\left[\begin{matrix}\frac{\partial^2{f}}{\partial{x_1^2}}&\frac{\partial^2{f}}{\partial{x_1}\partial{x_2}}&\dots&\frac{\partial^2{f}}{\partial{x_1}\partial{x_n}}\\\frac{\partial^2{f}}{\partial{x_2}\partial{x_1}}&\frac{\partial^2{f}}{\partial{x_2^2}}&\dots&\frac{\partial^2{f}}{\partial{x_2}\partial{x_n}}\\\vdots&\vdots&\ddots&\vdots\\\frac{\partial^2{f}}{\partial{x_n}\partial{x_1}}&\frac{\partial^2{f}}{\partial{x_n}\partial{x_2}}&\dots&\frac{\partial^2{f}}{\partial{x_n^2}}\\\end{matrix}\right]</script><ul><li><a href="https://baike.baidu.com/item/%E9%BB%91%E5%A1%9E%E7%9F%A9%E9%98%B5/2248782?fr=aladdin" target="_blank" rel="noopener">海森矩阵</a></li></ul><h2 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h2><blockquote><p>数学中，泰勒公式是一个用函数在某点的信息描述其附近取值的公式。如果函数足够平滑的话，在已知函数在某一点的各阶导数值的情况之下，泰勒公式可以用这些导数值做系数构建一个多项式来近似函数在这一点的邻域中的值。泰勒公式还给出了这个多项式和实际的函数值之间的偏差。</p></blockquote><script type="math/tex; mode=display">f(x)=\frac{f(a)}{0!}+\frac{f'(a)}{1!}(x-a)+\frac{f''(a)}{2!}(x-a)^2+\dots+\frac{f^n(a)}{n!}(x-a)^n+R_n(x)</script><h2 id="李代数"><a href="#李代数" class="headerlink" title="李代数"></a>李代数</h2><p>首先特殊正交群SO(3)可以代表旋转矩阵，SE(3)可以代表欧式变换矩阵。矩阵对于乘法封闭，对于加法不封闭，所以具有群的特性。</p><p>李群是指具有连续(光滑)性质的群。</p><ul><li><p>外积</p><script type="math/tex; mode=display">\boldsymbol{a}\times\boldsymbol{b}=\left[\begin{matrix}\boldsymbol{i}&\boldsymbol{j}&\boldsymbol{k}\\a_1&a_2&a_3\\b_1&b_2&b_3\\\end{matrix}\right]=\left[\begin{matrix}a_2b_3-a_3b_2\\a_3b_1-a_1b_3\\a_1b_2-a_2b_1\\\end{matrix}\right]=\left[\begin{matrix}0&-a_3&a_2\\a_3&0&-a_1\\-a_2&a_1&0\\\end{matrix}\right]\boldsymbol{b}\triangleq\boldsymbol{a}^{\wedge}\boldsymbol{b}</script><p>相应的，有</p><script type="math/tex; mode=display">\boldsymbol{a}=[a_1\boldsymbol{i},a_2\boldsymbol{j},a_3\boldsymbol{k}],\\\boldsymbol{a}^{\wedge}=\boldsymbol{A}=\left[\begin{matrix}0&-a_3&a_2\\a_3&0&-a_1\\-a_2&a_1&0\\\end{matrix}\right],\\\boldsymbol{A}^{\vee}=\boldsymbol{a}</script></li><li><p>特殊正交群 $SO(3)$</p><script type="math/tex; mode=display">SO(3)=\{R\in\mathbb{R}^{3\times3}|RR^T=I,\det(R)=1\}</script></li><li><p>特殊欧式群$SE(3)$</p><script type="math/tex; mode=display">SE(3)=\{T=\left[\begin{matrix}R&t\\0^T&1\\\end{matrix}\right]\in\mathbb{R}^{4\times4}|R\in SO(3),t\in \mathbb{R}^3\}</script></li><li><p>李代数$\mathfrak{so}(3)$</p><p>在对$RR^T=I$进行求导及整理之后，可以得到$R(t)^{‘}R(t)^T$是一个反对称矩阵，那么就用一个$\phi(t)\in\mathbb{R}^3$与之对应。有：</p><script type="math/tex; mode=display">R(t)^{'}R(t)^T=\phi(t)^{\wedge}</script><p>之后求解微分方程，可以得到：</p><script type="math/tex; mode=display">R(t)=exp(\phi^{\wedge}t)</script><p>实际求解时利用到指数映射和对数映射。</p></li></ul><h2 id="奇异值分解"><a href="#奇异值分解" class="headerlink" title="奇异值分解"></a>奇异值分解</h2><p><a href="https://www.cnblogs.com/lzllovesyl/p/5243370.html" target="_blank" rel="noopener">参考资料</a></p><p><a href="https://blog.csdn.net/xiaocong1990/article/details/54909126/" target="_blank" rel="noopener">分解原理</a></p><h2 id="方阵的迹"><a href="#方阵的迹" class="headerlink" title="方阵的迹"></a>方阵的迹</h2><blockquote><p><a href="https://baike.baidu.com/item/%E7%9F%A9%E9%98%B5%E7%9A%84%E8%BF%B9/8889744?fr=aladdin" target="_blank" rel="noopener">百度百科词条</a></p><p>在<a href="https://baike.baidu.com/item/线性代数/800" target="_blank" rel="noopener">线性代数</a>中，一个n×n矩阵<strong><em>A</em></strong>的<a href="https://baike.baidu.com/item/主对角线/4269887" target="_blank" rel="noopener">主对角线</a>（从左上方至右下方的对角线）上各个元素的总和被称为<a href="https://baike.baidu.com/item/矩阵/18069" target="_blank" rel="noopener">矩阵</a><strong><em>A</em></strong>的<strong>迹</strong>（或<strong>迹数</strong>），一般记作<strong>tr(A)</strong>。</p></blockquote><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>tr(AB)=tr(BA)</li><li>tr(ABC)=tr(CAB)=tr(BCA)</li><li>f(a)=tr(AB)，$\bigtriangledown_Atr(AB)=B^T$</li><li>$tr(A)=tr(A^T)$</li><li><p>tr(a)=a,$a \in R$</p></li><li><p>$\bigtriangledown_Atr(ABA^TC)=CAB+C^TAB^T$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake入门</title>
      <link href="/2018/09/13/CMake%E5%85%A5%E9%97%A8/"/>
      <url>/2018/09/13/CMake%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>本文转载自<a href="https://blog.csdn.net/yaoyuanyylyy" target="_blank" rel="noopener">yaoyuanyylyy</a><br><a href="https://blog.csdn.net/yaoyuanyylyy/article/details/79024962" target="_blank" rel="noopener">CMake入门1——CMake与VS编译器和nmake的结合使用</a><br><a href="https://blog.csdn.net/yaoyuanyylyy/article/details/79043599" target="_blank" rel="noopener">CMake入门2——复杂项目的构建配置</a><br><a href="https://blog.csdn.net/yaoyuanyylyy/article/details/79051295" target="_blank" rel="noopener">CMake入门3——更多指令的使用</a><br>本文描述在Win10-64位系统中安装CMake、cmake-gui的简单使用及其与VS2015编译器的结合使用，以及cmake命令行与nmake的结合使用。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>从<a href="https://cmake.org/download/" target="_blank" rel="noopener">CMake官网</a>上下载最新版本的安装包，本文中下载的是 <strong>cmake-3.10.1-win64-x64.msi</strong>。若不想安装，可直接下载压缩包版本<a href="https://cmake.org/files/v3.10/cmake-3.10.1-win64-x64.zip" target="_blank" rel="noopener">cmake-3.10.1-win64-x64.zip</a>。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>CMake的安装非常简单。压缩包版本直接解压即可，安装版本也可一直点击下一步进行安装。为了使用方便，可将CMake配置到环境变量中，当然，这一步也可以在安装过程中设置。另外需要注意的是为了避免不必要的麻烦，路径中最好不要包括中文字符。下面简单描述一下安装过程。</p><ol><li>双击下载的安装包，进入安装界面，点击[Next]。<br><img src="/2018/09/13/CMake入门/1.png" alt="这里写图片描述"></li><li>勾选同意许可后，点击[Next]。<br><img src="/2018/09/13/CMake入门/2.png" alt="这里写图片描述"></li><li>可在此处选择将CMake路径添加到环境变量中，并且创建CMake GUI程序的桌面快捷方式。然后点击[Next]。<br><img src="/2018/09/13/CMake入门/3.png" alt="这里写图片描述"></li><li>可在此处自定义安装目录，设置好后点击[Next]。<br><img src="/2018/09/13/CMake入门/4.png" alt="这里写图片描述"></li><li>开始安装，安装完成后点击[Next]。<br><img src="/2018/09/13/CMake入门/5.png" alt="这里写图片描述"></li><li>安装完成，点击[Finish]，结束安装过程。<br><img src="/2018/09/13/CMake入门/6.png" alt="这里写图片描述"></li><li>安装完成后，即可使用CMake了。在命令行中输入<code>&quot;cmake --version&quot;</code>，可看到如下图所示的输出。<br><img src="/2018/09/13/CMake入门/7.png" alt="这里写图片描述"></li></ol><h1 id="例1-使用cmake-gui与VS生成器"><a href="#例1-使用cmake-gui与VS生成器" class="headerlink" title="例1 使用cmake-gui与VS生成器"></a>例1 使用cmake-gui与VS生成器</h1><p>本例使用cmake-gui和VS生成器构建出VS工程，然后用VS工具打开项目进行编译。</p><ol><li>新建CMakeTest目录，在CMakeTest目录下新建demo1目录，作为测试项目的根目录。在demo1下新建main.cpp和CMakeLists.txt文件。<br><img src="/2018/09/13/CMake入门/8.png" alt="这里写图片描述"><br>main.cpp文件的内容很简单，就是输出一个提示字符串：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;cmake test demo 1&quot;&lt;&lt;endl;</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># CMake最低版本要求 </span><br><span class="line">cmake_minimum_required(VERSION 3.10.1)</span><br><span class="line"># 项目信息</span><br><span class="line">project(demo1)</span><br><span class="line"># 指定生成目标</span><br><span class="line">add_executable(demo main.cpp)</span><br></pre></td></tr></table></figure><p>CMakeLists.txt 的语法比较简单，由命令、注释和空格组成。命令由命令名称、小括号和参数组成，参数之间使用空格进行间隔，且命令是不区分大小写的。符号 # 后面的内容被认为是注释。<br>对于上面的 CMakeLists.txt 文件，依次出现了几个命令：</p><ul><li><strong>cmake_minimum_required</strong>：指定运行此配置文件所需的 CMake 的最低版本，如果低于3.10.1版本，则构建过程会被终止</li><li><strong>project</strong>：参数值是 demo1，该命令表示项目的名称是 demo1 </li><li><strong>add_executable</strong>： 将名为 main.cpp 的源文件编译成一个名称为 demo 的可执行文件</li></ul><ol><li>打开cmake-gui程序，在上方配置两个目录:</li></ol><ul><li>第一个是CMakeLists文件目录，cmake据此开始执行</li><li>第二个是cmake构建后的项目目录<br><img src="/2018/09/13/CMake入门/9.png" alt="这里写图片描述"></li></ul><ol><li>配置好点击[Configure]开始执行配置过程。首先会弹出编译器选择界面，此处使用默认的VS2015-32位编译器，直接点击[Finish]，开始配置。<br><img src="/2018/09/13/CMake入门/10.png" alt="这里写图片描述"></li><li>第一次配置完成后如图所示，红色的两行是新的配置值，再次点击[Configure]即可。<br><img src="/2018/09/13/CMake入门/11.png" alt="这里写图片描述"><br><img src="/2018/09/13/CMake入门/12.png" alt="这里写图片描述"></li><li>配置完成后，在build目录生成了如下的文件<br><img src="/2018/09/13/CMake入门/13.png" alt="这里写图片描述"></li><li>点击[Generate]，开始生成VS项目<br><img src="/2018/09/13/CMake入门/14.png" alt="这里写图片描述"></li><li>生成完成后，在build目录下生成了demo1对于的VS项目<br><img src="/2018/09/13/CMake入门/15.png" alt="这里写图片描述"></li><li>通过点击cmake-gui中下放的[Open Project]按钮或者直接双击build目录下的demo1.sln，即可在VS中打开工程。<br><img src="/2018/09/13/CMake入门/16.png" alt="这里写图片描述"></li><li>cmake生的demo1工程总共有3个项目</li></ol><ul><li><strong>ZERO_CHECK</strong>：该项目会检查生成工程的 CMake 配置文件（ CMakeLists.txt  ）是否更新。如更新，将运行 CMake 重新生成工程文件。如果确信 CMakeLists.txt 不会被更新，或者希望手工运行 CMake  重新生成工程文件，可以在 CMakeLists.txt 配置文件中添加 set(CMAKE_SUPPRESS_REGENERATION  FALSE) 命令， ZERO_CHECK 目标将不会生成。</li><li><strong>ALL_BUILD</strong>：该目标会导致工程中所有项目被构建，类似 Visual Studio 的 Build All 或者 make 的 make all命令。</li><li><strong>demo</strong>：项目本身，就是在CMakeLists.txt文件中配置的<code>project(demo1)</code></li></ul><ol><li>在VS中通过单独生成项目demo1或者直接生成项目All_BUILD后，可以在build下的相应目录看到可执行文件demo.exe已经生成。双击demo.exe后，可以看到程序输出。<br>  <img src="/2018/09/13/CMake入门/17.png" alt="这里写图片描述"></li><li>如果不想用VS打开工程，也可以使用msbuild.exe编译demo1工程。首先需要打开VS命令行，因为cmake-gui中选择的编译器是32位的，所以此处选择”VS2015 x86 本机工具命令提示符”。<br>  <img src="/2018/09/13/CMake入门/18.png" alt="这里写图片描述"><br> 打开后在命令行中进入到demo1的build目录，执行<code>msbuild demo1.sln</code>即可编译demo1项目。编译完成后可以在debug中看到生成的demo.exe文件，双击可运行。<br>  <img src="/2018/09/13/CMake入门/19.png" alt="这里写图片描述"></li></ol><h1 id="例2-使用cmake命令与nmake生成器-本例使用cmake命令行与nmake生成器构建Makefile，然后用nmake编译项目。"><a href="#例2-使用cmake命令与nmake生成器-本例使用cmake命令行与nmake生成器构建Makefile，然后用nmake编译项目。" class="headerlink" title="例2 使用cmake命令与nmake生成器 本例使用cmake命令行与nmake生成器构建Makefile，然后用nmake编译项目。"></a>例2 使用cmake命令与nmake生成器 本例使用cmake命令行与nmake生成器构建Makefile，然后用nmake编译项目。</h1><ol><li>新建项目demo2，将demo1中的main.cpp和CMakeLists.txt文件拷贝过来。将CMakeLists.txt文件中的project项目配置为demo2。 2. 同样从VS命令行进入到demo2目录，执行命令：       </li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -G <span class="string">"NMake Makefiles"</span> .</span><br></pre></td></tr></table></figure><p>执行完毕后，即可看到在demo2目录中生成了一些文件：<br>   <img src="/2018/09/13/CMake入门/20.png" alt="这里写图片描述"><br> 其中重要的是Makefile文件，这是用来编译项目的。在命令行中继续执行nmake命令开始编译，编译完成后可以看到在demo2目录生成了demo.exe程序。允许后可以看到输出。<br>   <img src="/2018/09/13/CMake入门/21.png" alt="这里写图片描述"></p><h1 id="例3-PreLoad-cmake用法"><a href="#例3-PreLoad-cmake用法" class="headerlink" title="例3 PreLoad.cmake用法"></a>例3 PreLoad.cmake用法</h1><p>在命令行下使用cmake，需要用”-G”选项指定生成器。每次都输入感觉比较麻烦，可以将其配置在”PreLoad.cmake”文件中。新建项目demo3，准备好main.cpp和CMakeLists.txt文件，然后demo3目录下新建文件”PreLoad.cmake”，输入：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_GENERATOR <span class="string">"NMake Makefiles"</span> CACHE INTERNAL <span class="string">""</span> FORCE)</span><br></pre></td></tr></table></figure><p>然后执行<code>&quot;cmake .&quot;</code>即可配置，然后执行<code>&quot;nmake&quot;</code>就可以编译。</p><h1 id="例4-多文件单目录测试"><a href="#例4-多文件单目录测试" class="headerlink" title="例4 多文件单目录测试"></a>例4 多文件单目录测试</h1><p>此测试项目将所有的文件都放在根目录下。<br> 在CMakeTest目录下新建demo4目录。demo4项目文件列表如下：<br>   <img src="/2018/09/13/CMake入门/22.png" alt="这里写图片描述"><br> 其中实现了算术运算的加减乘除，每个功能分别实现在各自的文件中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_minus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_multiply</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><p>然后在main.cpp中调用各个函数，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"add.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"minus.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"multiply.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"divide.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"cmake test demo 4"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"+"</span>&lt;&lt;b&lt;&lt;<span class="string">"="</span>&lt;&lt;my_add(a, b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"-"</span>&lt;&lt;b&lt;&lt;<span class="string">"="</span>&lt;&lt;my_minus(a, b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"*"</span>&lt;&lt;b&lt;&lt;<span class="string">"="</span>&lt;&lt;my_multiply(a, b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">"/"</span>&lt;&lt;b&lt;&lt;<span class="string">"="</span>&lt;&lt;my_divide(a, b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMakeLists.txt文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(demo4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件，并将名称保存到DIR_SRCS变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(demo <span class="variable">$&#123;DIR_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure><p>此配置文件中使用了一条新命令：</p><ul><li><strong>aux_source_directory</strong>：该命令会查找指定目录下的所有源文件，然后将结果存进指定变量名。这样，就不用在add_executable中列出所有源文件了，而是直接引用变量即可。<br>从VC命令行进入到demo4目录，然后执行cmake命令和nmake命令，即可编译出执行程序。<br> <img src="/2018/09/13/CMake入门/23.png" alt="这里写图片描述"></li></ul><h1 id="例5-多文件单子目录测试"><a href="#例5-多文件单子目录测试" class="headerlink" title="例5 多文件单子目录测试"></a>例5 多文件单子目录测试</h1><p>此测试项目将main入口函数文放在根目录下，其他文件放在独立目录下。<br>新建demo5目录，使用例3中的项目文件，将main.cpp放在demo5目录下，将其他的加减乘除的相关文件放在math子目录下。然后在demo5目录和math目录下分别放一个CMakeLists.txt文件。<br>   <img src="/2018/09/13/CMake入门/24.png" alt="这里写图片描述"><br>   <img src="/2018/09/13/CMake入门/25.png" alt="这里写图片描述"><br>其中demo5目录下的CMakeLists.txt文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(demo5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">math</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件，并将名称保存到DIR_SRCS变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(demo <span class="variable">$&#123;DIR_SRCS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加math子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="keyword">math</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo <span class="keyword">math</span>)</span><br></pre></td></tr></table></figure><p>在这个配置文件中，依次出现了几条新的cmake命令：</p><ul><li><strong>include_directories</strong>：头文件包含目录，因为main.cpp中使用了加减乘除函数，因此需要指明头文件目录所在之处。当然，也可以在main.cpp中包含都文件时指定目录</li><li><strong>add_subdirectory</strong>：添加子目录命令，表示需要编译该子目录</li><li><strong>target_link_libraries</strong>：添加要依赖的库文件，此处的math库是在子目录math中编译出来的<br>math目录下的CMakeLists.txt文件内容如下：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件，并将名称保存到DIR_SRCS变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_library</span>(<span class="keyword">math</span> <span class="variable">$&#123;DIR_LIB_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure><p>在上面这个配置文件中，出现了一条新命令：</p><ul><li><strong>add_library</strong>：将指定的文件编译为库，前面是库名称，后面是源文件<br>进demo5目录，然后执行cmake命令和nmake命令，即可编译出执行程序。可以看到，在math子目录下生成了一个”math.lib”的库文件。</li></ul><h1 id="例6-多目录和多级目录测试"><a href="#例6-多目录和多级目录测试" class="headerlink" title="例6 多目录和多级目录测试"></a>例6 多目录和多级目录测试</h1><p>本例子demo6中把加减乘除四个运算分散在不同的目录下，形成了多个目录、多级目录的形式。具体的文件布局如下图所示：<br>   <img src="/2018/09/13/CMake入门/26.png" alt="这里写图片描述"><br> 多个子目录和多级目录在用cmake来构建时的一种方式是：将所有源文件按功能或目录来分别构建为库，然后在需要用到库的地方链接上所需的一个或多个库。<br> 对于此例来说，各目录的说明和构建方式如下：</p><ul><li>demo6根目录下包括了math和divide两个目录；</li><li>divide目录是除法目录，由其目录中的配置文件单独构建为一个库；</li><li>math目录包括了add_minus和multiply两个目录；</li><li>add_minus目录包括加法的实现文件和减法目录minus;</li><li>减法不单独构建为库，而是和加法一起，用add_minus中的配置文件构建为一个库；</li><li>乘法的库也不再它自己的目录中构建，而是在math目录下构建为单独的乘法库；</li><li>最后，在demo6根目录下的配置文件中构建demo.exe程序，并连接了乘法库、除法库、加减法合在一起的库；<br><strong>首先</strong>，divide目录下构建除法库的配置文件比较简单，使用了 <code>aux_source_directory</code>  和<code>add_library</code>两条指令。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件，并将名称保存到DIR_LIB_DIVIDE_SRCS变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_LIB_DIVIDE_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_library</span>(lib_divide <span class="variable">$&#123;DIR_LIB_DIVIDE_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure><p><strong>其次</strong>，加减法库的构建如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件，并将名称保存到DIR_MINUS_SRCS变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(./minus DIR_MINUS_SRCS)</span><br><span class="line"><span class="comment"># 把要编译的文件都列在此处，存入ADD_SRCS变量中</span></span><br><span class="line"><span class="keyword">set</span>(ADD_SRCS add.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_library</span>(lib_add_minus <span class="variable">$&#123;ADD_SRCS&#125;</span> <span class="variable">$&#123;DIR_MINUS_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure><p>这个也很简单，只是有3点小改变：</p><ul><li><strong>aux_source_directory</strong>指令中指定的目录为<code>./minus</code>，表示当前文件夹下的<code>minus</code>子目录，也就是把<code>minus</code>子目录下的减法源文件存在了<code>DIR_MINUS_SRCS</code>变量中</li><li>使用了一条新的指令<strong>set</strong>，这也是一条用来设置变量的，不过变量放在前面，变量的值放在后面。这里指定为将当前目录下的加法实现源文件存入变量<code>ADD_SRCS</code>中。需注意的是，后面的文件可以列出多个各处的文件</li><li>在<strong>add_library</strong>命令将前面的两个保存了加法和减法源文件的变量一起用来生成一个库<code>lib_add_minus</code><br><strong>再次</strong>，<code>math</code>目录下的配置文件如下：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(add_minus)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把要编译的文件都列在此处，存入DIR_MULTIPLY_SRC变量中</span></span><br><span class="line"><span class="keyword">set</span>(DIR_MULTIPLY_SRC multiply/multiply.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_library</span>(lib_multiply <span class="variable">$&#123;DIR_MULTIPLY_SRC&#125;</span>)</span><br></pre></td></tr></table></figure><p>在这个配置文件中，将<code>multiply</code>目录下的乘法编译成了单独的一个库，然后添加了<code>add_minus</code>子目录。所用的指令都是已使用过的。<br><strong>最后</strong>，根目录<code>demo6</code>下的配置文件如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(demo6)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">math</span>/add_minus <span class="keyword">math</span>/add_minus/minus <span class="keyword">math</span>/multiply)</span><br><span class="line"><span class="keyword">include_directories</span>(divide)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前目录下的所有源文件，并将名称保存到DIR_SRCS变量中</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(demo <span class="variable">$&#123;DIR_SRCS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加math子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(<span class="keyword">math</span>)</span><br><span class="line"><span class="comment"># 添加divide子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(divide)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo lib_add_minus)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(demo lib_multiply lib_divide)</span><br></pre></td></tr></table></figure><p>在这个配置文件中，有几点小说明：</p><ul><li>这个根目录下的配置文件为cmake的入口配置文件，所以在其中指定了最低版本。这样其实在子目录下的配置文件中就可以不用再用<code>cmake_minimum_required</code>指令了</li><li>用<code>include_directories</code>指令指明了头文件所在目录，一条命令中可以指定多个头文件包含目录。在实际项目中可将头文件提取到一个目录中，然后指定一个目录就可以了</li><li>用<code>add_subdirectory</code>指明了<code>divide</code>和<code>math</code>两个子目录</li><li>用<code>target_link_libraries</code>将各个库连接到目标程序”demo”中，此命令也可以一次指定多个库。<br>至此，所有的工作就做好了，在命令下执行cmake命令和nmake命令，就可编译出执行程序。同时可以看到，在math子目录下生成了一个”lib_multiply.lib”库，在math/add_minus目录下生成了一个lib_add_minus.lib库，在divide目录下生成了lib_divide库。</li></ul><h1 id="基本语法规则"><a href="#基本语法规则" class="headerlink" title="基本语法规则"></a>基本语法规则</h1><p>从前面的几个例子中，我们使用了cmake的几条基本指令，在这里，总结一下：</p><ul><li>cmake由指令、注释和空白字符组成</li><li>以#开头，到行末尾的是注释</li><li>形如<code>指令(参数1 参数2 参数3 ...)</code>的是指令，参数间使用空格或者分号<code>;</code>隔开</li><li>指令不区分大小写，但参数是区分大小写的</li><li>cmake中可以设置变量，变量的引用方式为<strong>${变量名}</strong></li><li>cmake的构建指令为<strong>“cmake path [参数选项]”</strong>；当前我们都使用的是<strong>“cmake .”</strong>，表示构建当前目录下的项目</li></ul><h1 id="内部构建与外部构建"><a href="#内部构建与外部构建" class="headerlink" title="内部构建与外部构建"></a>内部构建与外部构建</h1><p>在前面的例子中，danger构建项目后，会发现cmake构建过程中产生的中间文件和项目文件混在一起，多了就不好区分；而且cmake不能跟踪这些中间文件，所以也没有一条可以清除它们的指令。<br> 这样的情况是因为我们使用的是cmake的内部构建，而cmake提供的另外一种称为外部构建的构建方式，可以解决这个问题。</p><ul><li><strong>内部构建</strong>：<code>in-source build</code>，在项目的入口配置文件目录下执行<strong>“cmake .”</strong>时，就是内部构建；这种方式下，生成的临时中间文件就放在了构建目录下，导致和源文件混在一起</li><li><strong>外部构建</strong>：<code>out-of-source build</code>，在其他目录下执行cmake构建命令，然后指定入口配置文件的目录，这样就可以将临时文件存放于单独的目录中。比如我们在项目下新建一个build目录，然后在build目录下执行<strong>“cmake ..”</strong>，那么我们就可以看到构建后的所有临时文件都产生在build目录中，这样就方便我们管理和清理了</li></ul><h1 id="例7-外部构建以及“project”和“message”指令"><a href="#例7-外部构建以及“project”和“message”指令" class="headerlink" title="例7 外部构建以及“project”和“message”指令"></a>例7 外部构建以及<strong>“project”</strong>和<strong>“message”</strong>指令</h1><p>首先，我们新建一个项目demo7，其中的源文件和demo6的是一样的，唯一的区别只有demo7根目录下的CMakeLists.txt文件不同，我们添加了几条<strong>“message”</strong>指令，这是用来在构建过程中显示消息的。<br> 配置文件的前面部分如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(demo7)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"the BINARY dir is $&#123;PROJECT_BINARY_DIR&#125;"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"the SOURCE dir is $&#123;PROJECT_SOURCE_DIR&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"the BINARY dir is $&#123;demo7_BINARY_DIR&#125;"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"the SOURCE dir is $&#123;demo7_SOURCE_DIR&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 后面的没有改变，此处省略不显示</span></span><br></pre></td></tr></table></figure><p>因为要采用外部构建的方式，因此我们先新建一个build目录，然后在build目录下执行cmake构建指令。过程如下：<br>   <img src="/2018/09/13/CMake入门/27.png" alt="这里写图片描述"><br> 可以从以一个红框中看到外部构建的一般过程。这里我们来看看第二个红框中的输出内容，这就是<strong>“message”</strong>指令的输出。<br> <strong>“message”</strong>指令的语法如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message</span>([SEND_ERROR | STATUS | FATAL_ERROR] <span class="string">"message"</span> ...)</span><br></pre></td></tr></table></figure><p>第一个参数是消息类型，后面的参数是一条或多条要显示的消息。错误类型有3种：</p><ul><li><strong>SEND_ERROR</strong>：表示产生错误信息</li><li><strong>STATUS</strong>：表示一般的状态信息</li><li><strong>FATAL_ERROR</strong>：我们知道肯定是严重错误信息，cmake会立即停止执行<br>参数个数：</li><li>一条消息显示指令后可以跟上多条消息，它们会依次连在一起进行显示<br>我们修改一下前面的配置文件如下：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最低版本要求，如果低于3.10.1版本，则构建过程会被终止 </span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span>(demo7)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"------------------------------"</span>  <span class="string">"this is "</span> <span class="string">"another message"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"the BINARY dir is $&#123;PROJECT_BINARY_DIR&#125;"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"------------------------------"</span>)</span><br><span class="line"><span class="keyword">message</span>(SEND_ERROR <span class="string">"the SOURCE dir is $&#123;PROJECT_SOURCE_DIR&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"------------------------------"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"the BINARY dir is $&#123;demo7_BINARY_DIR&#125;"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"------------------------------"</span>)</span><br><span class="line"><span class="keyword">message</span>(FATAL_ERROR <span class="string">"the SOURCE dir is $&#123;demo7_SOURCE_DIR&#125;"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"------------------------------"</span>)</span><br></pre></td></tr></table></figure><p>在每条消息前后我们用分割线分割开，构建后，可以看到消息显示如下：<br>   <img src="/2018/09/13/CMake入门/28.png" alt="这里写图片描述"><br> 第一个红框中的是前两条消息，其中第一条消息的多个消息是连续显示的；第二个红框中的是”SEND_ERROR”类型的错误消息，cmake会提示错误所在的行，然后项目会继续构建；最后一个红框中的是”FATAL_ERROR”类型的消息，cmake首先也输出了错误消息，然后便中止了构建过程。<br>下面我们来关注一下这个配置文件中在message指令中使用的几个变量：</p><ul><li>${PROJECT_BINARY_DIR}</li><li>${PROJECT_SOURCE_DIR}</li><li>${demo6_BINARY_DIR}</li><li>${demo6_SOURCE_DIR}<br><strong>首先，”project”</strong> 指令在使用后会定义两个隐式的变量 <strong>“PROJECT_BINARY_DIR”</strong> 和 <strong>“PROJECT_SOURCE_DIR”</strong>。从输出的消息我们也可以看到，前者就是我们执行构建命令时所在的目录，也是我们的中间文件存放的目录；后者就是我们的配置文件和源文件所在的目录。<br> <strong>同时</strong>，因为用 <strong>“project”</strong> 指令将项目名称指定为 <strong>“demo7”</strong> ，所以这两个变量中的”PROJECT”部分也可以中”demo7来代替。但是，不推荐用这种方式。<br> <strong>另外</strong>，当我们使用内部构建时，这两个变量的值是一样的。<br> <strong>最后</strong>，这两个值和我们使用cmake-gui时，要设置的两个目录是相对应的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java平台下Opencv图像展示的简便实现</title>
      <link href="/2018/08/12/Java%E5%B9%B3%E5%8F%B0%E4%B8%8BOpencv%E5%9B%BE%E5%83%8F%E5%B1%95%E7%A4%BA%E7%9A%84%E7%AE%80%E4%BE%BF%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/12/Java%E5%B9%B3%E5%8F%B0%E4%B8%8BOpencv%E5%9B%BE%E5%83%8F%E5%B1%95%E7%A4%BA%E7%9A%84%E7%AE%80%E4%BE%BF%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在C++环境下的OpenCV中，展示Mat图像可以通过imshow()实现。但在Java平台上该怎样简便地实现呢？</p><p>通常的做法是将读取到的Mat转化为BufferedImage，将BufferedImage作为GUI中的icon进行展示。下方是将Mat转化为BufferedImage的代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Mat转换成BufferedImage</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> matrix 要转换的Mat</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileExtension 格式为 ".jpg", ".png", etc</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 转换后的BufferedImage</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">Mat2BufferedImage</span> <span class="params">(Mat matrix, String fileExtension)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// convert the matrix into a matrix of bytes appropriate for this file extension</span></span><br><span class="line">       MatOfByte mob = <span class="keyword">new</span> MatOfByte();</span><br><span class="line">       Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">       <span class="comment">// convert the "matrix of bytes" into a byte array</span></span><br><span class="line">       <span class="keyword">byte</span>[] byteArray = mob.toArray();</span><br><span class="line">       BufferedImage bufImage = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           InputStream in = <span class="keyword">new</span> ByteArrayInputStream(byteArray);</span><br><span class="line">           bufImage = ImageIO.read(in);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> bufImage;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这里提供一种简单的方法，实现了类似C++的图像展示方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JPanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Mat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUI</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageUI</span><span class="params">(Mat m, String window)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        init(m, window);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Elements for paint.</span></span><br><span class="line">    <span class="keyword">private</span> Mat mat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> firstPaint = <span class="keyword">true</span>; </span><br><span class="line">    <span class="keyword">private</span> BufferedImage out;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> String WINDOW = <span class="string">""</span>; </span><br><span class="line">    <span class="keyword">private</span> JFrame jframe = <span class="keyword">new</span> JFrame();        </span><br><span class="line">    <span class="keyword">byte</span>[] data;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Mat2BufIm</span><span class="params">()</span></span>&#123;               </span><br><span class="line">        mat.get(<span class="number">0</span>, <span class="number">0</span>, data);</span><br><span class="line">        out.getRaster().setDataElements(<span class="number">0</span>, <span class="number">0</span>, mat.cols(), mat.rows(), data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Mat m,String window)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mat = m;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">byte</span>[mat.cols() * mat.rows() * (<span class="keyword">int</span>)mat.elemSize()];</span><br><span class="line"></span><br><span class="line">        WINDOW = window;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mat.channels() == <span class="number">1</span>)</span><br><span class="line">            type = BufferedImage.TYPE_BYTE_GRAY;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            type = BufferedImage.TYPE_3BYTE_BGR;</span><br><span class="line">        out = <span class="keyword">new</span> BufferedImage(mat.cols(), mat.rows(), type);</span><br><span class="line">        Mat2BufIm();    </span><br><span class="line">        jframe.add(<span class="keyword">this</span>);  </span><br><span class="line">        jframe.setSize(mat.cols(), mat.rows());  </span><br><span class="line">        jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); </span><br><span class="line">        jframe.setTitle(WINDOW);</span><br><span class="line">        jframe.addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;  </span><br><span class="line">            g.drawImage(out, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageUI <span class="title">imshow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(firstPaint)&#123;</span><br><span class="line">            jframe.setVisible(<span class="keyword">true</span>); </span><br><span class="line">            firstPaint = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        Mat2BufIm();</span><br><span class="line">        <span class="keyword">this</span>.repaint();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Elements for waitKey.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object mt = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lastKey = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">waitKey</span><span class="params">(<span class="keyword">int</span> millisecond)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO 实现监听键盘</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(millisecond == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(mt)&#123;</span><br><span class="line">                    mt.wait();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(millisecond);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(key != lastKey)&#123;</span><br><span class="line">            ret = key;</span><br><span class="line">            lastKey = key;          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(mt)&#123;</span><br><span class="line">            mt.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.key = e.getKeyCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目中添加上面的源码后，可以通过以下方式实现图像的展示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat mat = Mat.eye(<span class="number">1000</span>, <span class="number">2000</span>, CvType.CV_8UC3);</span><br><span class="line">String window_name = <span class="string">"mat"</span></span><br><span class="line">ImageUI ig = <span class="keyword">new</span> ImageGui(mat,window_name);</span><br><span class="line">ig.imshow();</span><br><span class="line">ig.waitKey(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>或者，可以通过另一种简单的方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat mat = Mat.eye(<span class="number">1000</span>, <span class="number">2000</span>, CvType.CV_8UC3);</span><br><span class="line"><span class="keyword">new</span> ImageGui(mat,<span class="string">"mat"</span>).imshow().waitKey(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java下OpenCV中Mat的初始化及赋值方法</title>
      <link href="/2018/08/08/Java%E4%B8%8BOpenCV%E4%B8%ADMat%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E8%B5%8B%E5%80%BC%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/08/Java%E4%B8%8BOpenCV%E4%B8%ADMat%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%8A%E8%B5%8B%E5%80%BC%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>利用函数构造特殊Mat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = Mat.eye(<span class="number">3</span>,<span class="number">3</span>, CvType.CV_64FC1);</span><br><span class="line">A = Mat.zero(<span class="number">3</span>,<span class="number">3</span>,CvType.CV_64FC1);</span><br></pre></td></tr></table></figure><p>诸如MatOfDouble之类的矩阵，还支持将矩阵转换为List或者从List（array）转换成矩阵。所以可以直接这样创建矩阵：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MatOfDouble A = <span class="keyword">new</span> MatOfDouble(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MatOfDouble A = <span class="keyword">new</span> MatOfDouble();</span><br><span class="line">A.fromArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>这样得到的矩阵实际上是一个列向量，也就是$9<em>1$的矩阵。如果想得到一个$3</em>3$的矩阵，可以使用reshape。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.reshape(<span class="number">1</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>注意这里第一个参数为通道数，第二个参数为行数</p>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows远程桌面连接阿里云Ubuntu服务器</title>
      <link href="/2018/08/02/Windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/08/02/Windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>本地Windows远程桌面连接阿里云Ubuntu 16.04服务器:</p><p>1、目的:希望通过本地的Windows远程桌面连接到阿里云的Ubuntu服务器,通过远程桌面图形界面的方式操作服务器。</p><p>2、条件:申请的阿里云Ubuntu服务器一台,本地Windows操作系统电脑一台。</p><p>3、如何远程桌面连接:</p><p>(1)首先通过Windows系统下连接Linux系统的命令行工具连接Ubuntu服务器,(工具:xshell,securecrt,putty等)。</p><p>(2)通过Windows下工具连接到linux操作系统,之后打开命令窗口,切换到root权限。</p><p>(3)先安装更新:apt-get upate。</p><p>(4)安装xrdp:输入apt-get install xrdp—&gt;回车—&gt;输入”y”—&gt;回车,安装完成。</p><pre><code>   (xrdp: An open source remote desktop protocol(rdp) server)</code></pre><p>(5)安装vnc4server:输入apt-get install vnc4server”—&gt;回车—&gt;输入”y”—&gt;回车,安装完成。</p><pre><code>   (VNC (Virtual Network Console)是虚拟网络控制台的缩写)</code></pre><p>(6)安装xfce4:输入apt-get install xubuntu-desktop”—&gt;回车—&gt;输入”y”—&gt;回车。</p><blockquote><p>—&gt;输入echo “xfce4-session” &gt;~/.xsession—&gt;回车—&gt;输入 service xrdp restart—&gt;回车,安装完成。</p><p>(Xfce是一个自由软件,运行在类Unix操作系统 (如Linux、FreeBSD 和 Solaris)上,提供轻量级桌面环境。)</p></blockquote><p>(7)在本地Windows电脑上,使用”窗口键+R”打开”运行对话框”—&gt;输入”mstsc”—&gt;回车—&gt;输入Ubuntu主机的IP地址—&gt;”连接”。</p><p>(8)选择”sesman-Xvnc”—&gt;输入”用户名和密码”—&gt;回车,成功登录到Ubuntu桌面,现在可以进行远程操作了。</p>]]></content>
      
      
      <categories>
          
          <category> 云服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
